import pandas as pd
import plotly.express as px
import dash
import dash_core_components as dcc
import dash_html_components as html
from tkinter import *
from tkinter import filedialog
from dash.dependencies import Output, Input
import webbrowser
import plotly.graph_objects as go

window = Tk()
window.title('DashPLOT')  
window.config(background = "#ffbb42") 
window.geometry('700x500')



def abrir_arquivo():
    global tabela_vendas
    global tabela_produto
    filepath = filedialog.askopenfilename(filetypes=(("csv", "*.csv"), ("all files", "*.*"))) 
    label = Label(window, text=filepath) 
    label.pack()
    label.place(x=200, y=80)
    tabela_vendas = pd.read_csv(filepath)
    tabela_produto = tabela_vendas.groupby("Produto", as_index=False).sum().sort_values("Quantidade", ascending=False).head(20)
        
def start_server():
    app = dash.Dash(__name__)

    #--------------------------------------------------------------------------------------------------------------
    #criar gráficos
    fig_pie = px.pie(data_frame=tabela_vendas, names='ID Loja', values = 'Valor Final',
                     labels={'ID Loja':'Loja', 'Valor Final':'Fatura em R$'},
                     height=600,
                     title='Gráfico de Faturamento')
    
    fig_hist = px.histogram(data_frame=tabela_vendas, x='ID Loja', y='Quantidade',
                            labels={'ID Loja':'Loja', 'Quantidade':'Quantidade'},
                            title='Histograma de Produtos vendidos por Loja')

    fig_produto = px.line(data_frame=tabela_produto, x='Produto', y='Quantidade', title='Produtos mais Vendidos')

    #--------------------------------------------------------------------------------------------------------------
    #fazer layout do dashboard

    #primeiro layout 
    app.layout = html.Div([ 
        html.H1('FATURAMENTO',
                style={'backgroundColor':'#faefde',
                       'textAlign': 'center',
                       'color': 'red',
                       'fontSize': 40}),
        html.P('Faturamento pode ser calculado pela soma da coluna Valor Final',
               style={'backgroundColor':'#faefde',
                      'textAlign': 'center',
                      'fontSize': 20}),
        dcc.Graph(id='grafico_pie',figure=fig_pie),
    #--------------------------------------------------------------------------------------------------------------
        html.Div([
            html.H1('QUANTIDADE', style={'backgroundColor':'#faefde', 'textAlign': 'center', 'color': 'blue', 'font-family':'Brush Script MT', 'fontSize': 40}),
            dcc.Graph(figure=fig_hist)
            ]),

        html.Div([
            html.H1('PRODUTOS', style={'backgroundColor':'#faefde', 'textAlign': 'center', 'color': 'orange', 'fontSize': 40}),
            dcc.Graph(figure=fig_produto)
            ]),

        html.Div([
            html.H1('TICKET MÉDIO', style={'backgroundColor':'#faefde', 'textAlign': 'center', 'color': '#8b0a50', 'fontSize': 40})
            
            ])

        ])

        
                                                 

    webbrowser.open('http://127.0.0.1:8050')    
    
    if __name__ == '__main__':
        app.run_server(debug=False)

bOpenFile = Button(window, text='Escolher arquivo', command=abrir_arquivo)
bOpenFile.pack()
bOpenFile.place(x=250, y=50)

        
bStartServer = Button(window, text='Começar servidor', command=start_server)
bStartServer.pack()
bStartServer.place(x=250, y=200)

window.mainloop()

-----------------------------------------------------------------------------------------------------2.0

import pandas as pd
import plotly.express as px
import dash
import dash_core_components as dcc
import dash_html_components as html
from tkinter import *
from tkinter import filedialog
from dash.dependencies import Output, Input
import webbrowser
import plotly.graph_objects as go

window = Tk()
window.title('DashPLOT')  
window.config(background = "#ffbb42") 
window.geometry('700x500')



def abrir_arquivo():
    global tabela_vendas
    global tabela_produto
    global ticket_medio
    global tabela_faturamento
    global tabela_quantidade
    #procurar arquivo pelo explorador de arquivo
    filepath = filedialog.askopenfilename(filetypes=(("csv", "*.csv"), ("all files", "*.*"))) 
    label = Label(window, text=filepath) 
    label.pack()
    label.place(x=200, y=80)
    #salvar o dataframe dentro da varíavel tabela_vendas
    tabela_vendas = pd.read_csv(filepath)
    
    #dataframe de tabela de quantidade vendido por cada produto.
    #necessário criar esse dataframe separado para cortar dados não necessários
    tabela_produto = tabela_vendas.groupby("Produto", as_index=False).sum().sort_values("Produto", ascending=False) 
    tabela_produto = tabela_produto.iloc[0:21]   #função iloc vai apagar os dados das linhas dentro dos parâmetros
    
    tabela_faturamento = tabela_vendas[["ID Loja", "Valor Final"]].groupby("ID Loja").sum()   # agrupar por ID Loja e fazer a soma do valor final
    tabela_faturamento = tabela_faturamento.sort_values(by = "ID Loja", ascending= True) #ascendente por ordem alfabética de ID Loja

    tabela_quantidade = tabela_vendas[["ID Loja", "Quantidade"]].groupby("ID Loja").sum().sort_values(by='Quantidade', ascending=False) 

    #tabela de ticket médio
    ticket_medio = (tabela_faturamento['Valor Final'] / tabela_quantidade['Quantidade']).to_frame() #converter para tabela 
    ticket_medio = ticket_medio.rename(columns={0:"Ticket Medio"})

    
def start_server():
    app = dash.Dash(__name__)

    #--------------------------------------------------------------------------------------------------------------
    #criar gráficos

    #gráfico em torta (pie) da tabela de faturamento
    fig_fatura = px.pie(data_frame=tabela_vendas, names='ID Loja', values = 'Valor Final',
                     labels={'ID Loja':'Loja', 'Valor Final':'Fatura em R$'},
                     height=600,
                     title='Gráfico de Faturamento')

    #gráfico em histograma da tabela de vendas
    fig_vendas = px.histogram(data_frame=tabela_vendas, x='ID Loja', y='Quantidade',
                            labels={'ID Loja':'Loja', 'Quantidade':'Quantidade'},
                            title='Histograma de Produtos vendidos por Loja')

    #gráfico em torta da tabela de top 20 produtos mais vendidos 
    fig_produto = px.pie(data_frame=tabela_produto, names='Produto', values='Quantidade', title='Produtos mais Vendidos')


    
    fig_ticket = px.bar(data_frame=tabela_vendas, x='ID Loja', y='', title='Ticket Médio')

    #--------------------------------------------------------------------------------------------------------------
    #fazer layout do dashboard

    #primeiro layout 
    app.layout = html.Div([ 
        html.H1('FATURAMENTO',
                style={'backgroundColor':'#faefde',
                       'textAlign': 'center',
                       'color': 'red',
                       'fontSize': 40}),
        #texto do primeiro layout
        html.P('Faturamento pode ser calculado pela soma da coluna Valor Final',
               style={'backgroundColor':'#faefde',
                      'textAlign': 'center',
                      'fontSize': 20}),
        dcc.Graph(id='grafico_pie',figure=fig_fatura),

            html.H2('QUANTIDADE', style={'backgroundColor':'#faefde', 'textAlign': 'center', 'color': 'blue', 'font-family':'Brush Script MT', 'fontSize': 40}),
            dcc.Graph(figure=fig_vendas),

            html.H3('PRODUTOS', style={'backgroundColor':'#faefde', 'textAlign': 'center', 'color': 'orange', 'fontSize': 40}),
            dcc.Graph(figure=fig_produto),

            html.H4('TICKET MÉDIO', style={'backgroundColor':'#faefde', 'textAlign': 'center', 'color': '#8b0a50', 'fontSize': 40}),
            dcc.Graph(figure=fig_ticket),

        ])

        
                                                 

    webbrowser.open('http://127.0.0.1:8050')    
    
    if __name__ == '__main__':
        app.run_server(debug=False)

bOpenFile = Button(window, text='Escolher arquivo', command=abrir_arquivo)
bOpenFile.pack()
bOpenFile.place(x=250, y=50)

        
bStartServer = Button(window, text='Começar servidor', command=start_server)
bStartServer.pack()
bStartServer.place(x=250, y=200)

window.mainloop()

-----------------------------------------------------------------------------------------------------
3.0

#programa feito por Moon Hyuk Kang, 19209988
#bibliotecas usadas
import pandas as pd                    
import matplotlib.pyplot as plt
import dataframe_image as dfi
from tkinter import *
from tkinter import filedialog
import os
import plotly.express as px
import plotly.graph_objects as go
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Output, Input
import webbrowser
#-------------------------------------------------------------------------------------------------------------------------------
#interface de usuário
window = Tk()
window.title('DashPLOT')  
window.config(background = "#a4dfd1") 
window.geometry('700x500')

#-------------------------------------------------------------------------------------------------------------------------------
#função para abrir o explorador de arquivo e escolher o arquivo excel
def abrir_arquivo():
    global tabela_vendas
    #procurar arquivo pelo explorador de arquivo
    filepath = filedialog.askopenfilename(filetypes=(("csv", "*.csv"), ("all files", "*.*"))) 
    label = Label(window, text=filepath) 
    label.pack()
    label.place(x=200, y=80)
    #salvar o dataframe dentro da varíavel tabela_vendas
    tabela_vendas = pd.read_csv(filepath)
    
#função para filtrar e processar dados do arquivo excel
def filtrar():
    global tabela_faturamento
    global tabela_quantidade
    global ticket_medio
    global top_produto
    global tabela_produto
    
    tabela_faturamento = tabela_vendas[["ID Loja", "Valor Final"]].groupby("ID Loja").sum()   # agrupar por ID Loja e fazer a soma do valor final
    tabela_faturamento = tabela_faturamento.sort_values(by = "ID Loja", ascending= True) #ascendente por ordem alfabética de ID Loja

    tabela_quantidade = tabela_vendas[["ID Loja", "Quantidade"]].groupby("ID Loja").sum().sort_values(by='Quantidade', ascending=False) 

    ticket_medio = (tabela_faturamento['Valor Final'] / tabela_quantidade['Quantidade']).to_frame() #converter para tabela 
    ticket_medio = ticket_medio.rename(columns={0:"Ticket Medio"})  #função para reconemar coluna
    
    #dataframe de tabela de quantidade vendido por cada produto.
    #dataframe para dashboard online
    tabela_produto = tabela_vendas.groupby("Produto", as_index=False).sum().sort_values("Quantidade", ascending=False) 
    tabela_produto = tabela_produto.iloc[0:100]

    #dataframe para a função img_produto
    top_produto = tabela_vendas[['Produto', 'Quantidade']].groupby('Produto').sum('Quantidade').head(20).sort_values(by='Quantidade', ascending=False)

#------------------------------------------------------------------------------------------------------------------------
#funções para converter tabelas em imagens png e exportar (pasta padrão é onde o executavel estiver localizado)
#tabela de quantidade, vai no botão bt1    
def img_quantidade():
    df_styled1 = tabela_quantidade.style.background_gradient()  
    dfi.export(df_styled1,"quantidade.png")
#tabela de faturamento, vai no botão bt2
def img_faturamento():
    df_styled2 = tabela_faturamento.style.background_gradient()
    dfi.export(df_styled2,"faturamento.png")
#tabela de ticket medio, vai no botão bt3
def img_ticket_medio():
    df_styled3 = ticket_medio.style.background_gradient()
    dfi.export(df_styled3,"ticket_medio.png")
#tabela de produtos mais vendidos, vai no botão bt4    
def img_produto():
    df_styled4 = top_produto.style.background_gradient()
    dfi.export(df_styled4,"top_produtos.png")



#------------------------------------------------------------------------------------------------------------------------
#começar servidor 
def start_server():
    app = dash.Dash(__name__)

    #criar gráficos
    #gráfico em torta (pie) da tabela de faturamento
    fig_fatura = px.pie(data_frame=tabela_vendas,
                        names='ID Loja',
                        values = 'Valor Final',
                        labels={'ID Loja':'Loja', 'Valor Final':'Fatura em R$'},
                        height=600,
                        hole=0.3,
                        title='Gráfico de Faturamento')

    #gráfico em histograma da tabela de vendas
    fig_vendas = px.histogram(tabela_vendas,
                              y='Quantidade',
                              x='ID Loja',
                              labels={'ID Loja':'Loja', 'Quantidade':'Quantidade'},
                              color_discrete_sequence=['#95c551'],
                              title='Histograma de Produtos vendidos por Loja')

    #tabela dos 100 produtos mais vendidos
    fig_produto = go.Figure(data=go.Table(
        header=dict(values=list(tabela_produto[['Produto','Quantidade']].columns),
            fill_color = 'paleturquoise',
            align='center'),
        cells=dict(dict(values=[tabela_produto['Produto'], tabela_produto['Quantidade']],
                        fill_color = '#e3d1e3'),
                        align='center')
        ))
                                          
    #----------------------------------------------------------------------------------------------------------------
    #fazer layout do dashboard
    #primeiro layout 
    app.layout = html.Div([ 
        html.H1('FATURAMENTO',
                style={'backgroundColor':'#faefde',   #cor do background em código HEX
                       'textAlign': 'center',         #centralizar o texto
                       'font-family':'Courier New',   #fonte do texto
                       'color': 'red',                #cor do texto
                       'fontSize': 40}),              #tamanho da fonte
        #texto do primeiro layout
        html.P('Este gráfico mostra o faturamento total de cada uma das lojas',
               style={'textAlign': 'center',
                      'font-family':'Courier New',
                      'fontSize': 20}),
        #gráfico do primeiro layer
        dcc.Graph(id='grafico_pie',figure=fig_fatura),
        
            #segundo layer
            html.H2('QUANTIDADE', style={'backgroundColor':'#faefde',   
                                         'textAlign': 'center',
                                         'color': 'blue',
                                         'font-family':'Courier New',
                                         'fontSize': 40}),
            #texto do segundo layer
            html.P('Este histograma mostra a quantidade produtos vendidos por cada loja.',
                                   style={'textAlign': 'center',
                                          'color': 'blue',
                                          'font-family':'Courier New',
                                          'fontSize': 20}),
            #gráfico do segundo layer
            dcc.Graph(figure=fig_vendas),

            #terceiro layer
            html.H3('PRODUTOS', style={'backgroundColor':'#faefde',
                                       'textAlign': 'center',
                                       'color': 'orange',
                                       'font-family':'Courier New',
                                       'fontSize': 40}),
            #texto do segundo layer
            html.P('Esta tabela mostra os 100 produtos mais vendidos.',
                                   style={'textAlign': 'center',
                                          'color': 'blue',
                                          'font-family':'Courier New',
                                          'fontSize': 20}),
            #gráfico do terceiro layer
            dcc.Graph(figure=fig_produto),

        ])
                                          
    webbrowser.open('http://127.0.0.1:8050')    #vai abrir o link do dash automaticamente no navegador de internet padrão
    
    if __name__ == '__main__':
        app.run_server(debug=False)

#--------------------------------------------------------------------------------------------------------------------------
#botão para abrir arquivo excel        
button_choose_file = Button(window, width = 20, text='Escolha o arquivo', font=("Helvetica", "9", "bold"), bg = '#ffbb42', command=abrir_arquivo)
button_choose_file.pack()
button_choose_file.place(x=200, y=50)

#filtrar e processar dados
button_start = Button(window, width = 10, text = "OK", font=("Helvetica", "9", "bold"), bg = '#ffbb42', command = filtrar)
button_start.pack()
button_start.place(x=250, y=120)

#botão para iniciar servidor
bStartServer = Button(window, width = 20, text='Começar servidor', font=("Helvetica", "9", "bold"), bg = '#ffbb42', command=start_server)
bStartServer.pack()
bStartServer.place(x=200, y=190)


#---------------------------------------------------------------------------------------------------------------------------
# botão para exportar as tabelas pandas como imagens png

#vai receber a função img_quantidade
bt1 = Button(window, width = 20, text='Quantidade', bg = '#ffbb42', font=("Helvetica", "9", "bold"), command=img_quantidade)
bt1.place(x=400, y=400)

#vai receber a função img_faturamento
bt2 = Button(window, width = 20, text='Faturamento', bg = '#ffbb42', font=("Helvetica", "9", "bold"), command=img_faturamento)
bt2.place(x=400, y=350)

#vai receber a função img_ticket_medio
bt3 = Button(window, width = 20, text='Ticket Médio', bg = '#ffbb42', font=("Helvetica", "9", "bold"), command=img_ticket_medio)
bt3.place(x=400, y=300)

#vai receber a função img_produto
bt4 = Button(window, width = 20, text='Produto', bg = '#ffbb42', font=("Helvetica", "9", "bold"), command=img_produto)
bt4.place(x=400, y=450) 

#deixar o programa rodando em loop
window.mainloop()



=====================================================================================================3.0

import sqlite3
from tkinter import *
from datetime import datetime
from datetime import timedelta

#================================layout-TKinter==============================
root = Tk()
root.title('DashFATEC')  # título da janela
root.geometry('1350x750')
root.config(bg='#a4dfd1')

date1 = datetime.today().strftime('%d-%m-%Y')
date2 = datetime.today() + timedelta(days=7)
date2 = date2.strftime('%d-%m-%Y')

#================================DATABASE===================================
conn = sqlite3.connect('dados.db')
c = conn.cursor()


c.execute("""CREATE TABLE IF NOT EXISTS alunos (
            id_aluno int,
            nome text,
            turma text
    )""")

c.execute("""CREATE TABLE IF NOT EXISTS livros (
            id_livro int,
            nome_livro text,
            autor text
    )""")

conn.commit()
conn.close()

#================================FRAMES================================ 

#MAINFRAME
MainFrame = Frame(root)
MainFrame.pack()
MainFrame.config(bg='#a4dfd1')

#FRAME DE TITULO
FrameTitulo = Frame(MainFrame,
                    bg='#cc6666',
                    bd=10,
                    width=1350,
                    pady=20,
                    relief = RIDGE)
FrameTitulo.pack(side=TOP)

Titulo = Label(FrameTitulo,
               width=34,
               text='Sistema de Biblioteca',
               bg='#cc6666',
               font=('arial', 47, 'bold'))
Titulo.pack()

#FRAME DE BOTÕES
FrameBotao = Frame(MainFrame,
                    bg='#a4dfd1',
                    bd=10,
                    width=1350,
                    height=50,
                    padx=20,
                    relief = RIDGE)
FrameBotao.pack(side=BOTTOM)

FrameDetalhe = Frame(MainFrame,
                        bg='#a4dfd1',
                        bd=10,
                        width=1350,
                        height=100,
                        padx=20,
                        relief = RIDGE)
FrameDetalhe.pack(side=BOTTOM)

#DATAFRAME
DataFrame = Frame(MainFrame,
                    bg='#a4dfd1',
                    bd=10,
                    width=1300,
                    height=400,
                    padx=20,
                    relief = RIDGE)
DataFrame.pack(side=BOTTOM)

#DATAFRAME DE ALUNOS
DataFrameLEFT = LabelFrame(DataFrame,
                            bg='#a4dfd1',
                            bd=10,
                            width=800,
                            height=300,
                            padx=20,
                            relief = RIDGE,
                            font=('arial', 12, 'bold'),
                            text='Informação dos Alunos')
DataFrameLEFT.pack(side=LEFT)

#DATAFRAME DE LIVROS
DataFrameRIGHT = LabelFrame(DataFrame,
                            bg='#a4dfd1',
                            bd=10,
                            width=450,
                            height=300,
                            padx=20,
                            relief = RIDGE,
                            font=('arial', 12, 'bold'),
                            text='Informação de Livros')
DataFrameRIGHT.pack(side=RIGHT)

#================================WIDGET_ALUNOS================================ 

#LABEL E ENTRY DE ID ALUNO
label_id_aluno = Label(DataFrameLEFT,
                       text='ID do aluno',
                       font=('arial', 12, 'bold'),
                       bg='#a4dfd1',
                       padx=2,
                       pady=2)
label_id_aluno.pack()

entry_id_aluno = Entry(DataFrameLEFT,
                       font=('arial', 12, 'bold'))
entry_id_aluno.pack()

#LABEL E ENTRY DE NOME ALUNO

label_nome = Label(DataFrameLEFT,
                       text='Nome do aluno',
                       font=('arial', 12, 'bold'),
                       bg='#a4dfd1',
                       padx=2,
                       pady=2)
label_nome.pack()

entry_nome = Entry(DataFrameLEFT,
                       font=('arial', 12, 'bold'))
entry_nome.pack()

#LABEL E ENTRY DE ALUNO TURMA

label_turma = Label(DataFrameLEFT,
                       text='Turma',
                       font=('arial', 12, 'bold'),
                       bg='#a4dfd1',
                       padx=2,
                       pady=2)
label_turma.pack()

entry_turma = Entry(DataFrameLEFT,
                       font=('arial', 12, 'bold'))
entry_turma.pack()

#================================WIDGET_LIVROS================================

#LABEL E ENTRY DE ID LIVRO
label_id_livro = Label(DataFrameLEFT,
                       text='ID do aluno',
                       font=('arial', 12, 'bold'),
                       bg='#a4dfd1',
                       padx=2,
                       pady=2)
label_id_livro.pack()
label_id_livro.place(x=1000, y=500)


root.mainloop()


=====================================================================================================
4.0
import sqlite3
from tkinter import *
from tkinter import ttk
from tkinter.messagebox import showinfo
from datetime import datetime
from datetime import timedelta
import json


#================================layout-TKinter==============================
root = Tk()
root.title('DashFATEC')  # título da janela
root.geometry('1350x750')
root.config(bg='#a4dfd1')

date1 = datetime.today().strftime('%d-%m-%Y')
date2 = datetime.today() + timedelta(days=7)
date2 = date2.strftime('%d-%m-%Y')

#if date2 == date1:
#   bg='#a92323'

#================================DATABASE===================================
conn = sqlite3.connect('dados.db')
c = conn.cursor()

#CRIAÇÃO DA TABELA alunos
c.execute("""CREATE TABLE IF NOT EXISTS alunos (
            id_aluno int PRIMARY KEY,
            nome text,
            turma text
            id_livro REFERENCES livros(id_livro)
    )""")

#CRIAÇÃO DA TABELA livros

c.execute("""CREATE TABLE IF NOT EXISTS livros (
            id_livro int PRIMARY KEY,
            nome_livro text,
            autor text
    )""")



conn.commit()
conn.close()

#================================FUNÇÕES====================================

#FUNÇÃO PARA ADICIONAR NA DATABASE
#VAI PRO botao_adicionar
def adicionar():
    conn = sqlite3.connect('dados.db')
    c = conn.cursor()
    c.execute('INSERT INTO alunos VALUES(:id_aluno, :nome, :turma, :id_livro)',
            {
               'id_aluno':entry_id_aluno.get(),
               'nome':entry_nome.get(),
               'turma':entry_turma.get(),
               'id_livro':entry_id_livro.get()
                })
    c.execute("SELECR rowid, * FROM ")
    records = c.fetchall()
    
    conn.commit()
    conn.close()
              
    entry_id_aluno.delete(0, END)
    entry_nome.delete(0, END)
    entry_turma.delete(0, END)
    entry_id_livro.delete(0, END)


#FUNÇÃO PARA FAZER REGISTRO DE NOVOS LIVROS
def registrar():
    newWindow = Toplevel(root)
    newWindow.title("Registro")
    newWindow.geometry("300x300")

    # entry
    entry_id_livro = Entry(newWindow, width=30)
    entry_id_livro.grid(row=0, column=1, padx=20)

    entry_livro_nome = Entry(newWindow, width=30)
    entry_livro_nome.grid(row=1, column=1)

    entry_autor = Entry(newWindow, width=30)
    entry_autor.grid(row=2, column=1)

    # labels
    lab_id_livro = Label(newWindow, text='ID do livro')
    lab_id_livro.grid(row=0, column=0)

    lab_livro_nome = Label(newWindow, text='Nome do livro')
    lab_livro_nome.grid(row=1, column=0)

    lab_autor = Label(newWindow, text='Autor')
    lab_autor.grid(row=2, column=0)

    def mostrar_dados():
        conn = sqlite3.connect('dados.db')
        c = conn.cursor()
        c.execute('SELECT * FROM livros')
        lista_livros = c.fetchall()
        for livro in lista_livros:
            tree.insert('', END, values=livro)
        conn.commit()
        conn.close()
        
        
    
    def query():
        conn = sqlite3.connect('dados.db')
        c = conn.cursor()
        c.execute('INSERT INTO livros VALUES(:id_livro, :nome_livro, :autor)',
                  {
                      'id_livro': entry_id_livro.get(),
                      'nome_livro': entry_livro_nome.get(),
                      'autor': entry_autor.get()
                  })
        conn.commit()
        conn.close()

        entry_id_livro.delete(0, END)
        entry_livro_nome.delete(0, END)
        entry_autor.delete(0, END)

    bt_query = Button(newWindow, text='OK', command=query)
    bt_query.grid(row=3, column=1)

    bt_mostrar_dados = Button(newWindow, text='Mostrar dados', command=mostrar_dados)
    bt_mostrar_dados.grid(row=4, column=1)
#================================FRAMES================================ 

#MAINFRAME
MainFrame = Frame(root)
MainFrame.pack()
MainFrame.config(bg='#a4dfd1')

#FRAME DE TITULO
FrameTitulo = Frame(MainFrame,
                    bg='#cc6666',
                    bd=10,
                    width=1350,
                    pady=20,
                    relief = RIDGE)
FrameTitulo.pack(side=TOP)

Titulo = Label(FrameTitulo,
               width=34,
               text='Sistema de Biblioteca',
               bg='#cc6666',
               font=('arial', 47, 'bold'))
Titulo.pack()

#FRAME DE DETALHES DE EMPRÉSTIMOS (DADOS DE ALUNO E LIVRO)
FrameDetalhe = Frame(MainFrame,
                        bg='#a4dfd1',
                        bd=10,
                        width=1350,
                        height=100,
                        padx=20,
                        relief = RIDGE)
FrameDetalhe.pack(side=BOTTOM)

#DATAFRAME
DataFrame = Frame(MainFrame,
                    bg='#a4dfd1',
                    bd=10,
                    width=1300,
                    height=400,
                    padx=20,
                    relief = RIDGE)
DataFrame.pack(side=BOTTOM)

#DATAFRAME NA ESQUERDA (ONDE OS DADOS DOS ALUNOS SERÃO MOSTRADOS)
DataFrameLEFT = LabelFrame(DataFrame,
                            bg='#a4dfd1',
                            bd=10,
                            width=700,
                            height=300,
                            padx=20,
                            relief = RIDGE,
                            font=('arial', 12, 'bold'),
                            text='Informação do Empréstimo')
DataFrameLEFT.pack(side=LEFT)

#DATAFRAME NA DIREITA (ONDE OS LIVROS VÃO SER MOSTRADOS)
DataFrameRIGHT = LabelFrame(DataFrame,
                            bg='#a4dfd1',
                            bd=10,
                            width=550,
                            height=300,
                            padx=20,
                            relief = RIDGE,
                            font=('arial', 12, 'bold'),
                            text='Livros')
DataFrameRIGHT.pack(side=RIGHT)

#============================DATAFRAME_LEFT_ALUNOS================================ 

#LABEL E ENTRY DE ID ALUNO
label_id_aluno = Label(DataFrameLEFT,
                       text='RA',
                       font=('arial', 12, 'bold'),
                       bg='#a4dfd1',
                       padx=2,
                       pady=2)
label_id_aluno.pack()
label_id_aluno.place(x=10,y=50)

entry_id_aluno = Entry(DataFrameLEFT,
                       font=('arial', 12, 'bold'))
entry_id_aluno.pack()
entry_id_aluno.place(x=140, y=50)

#LABEL E ENTRY DE NOME ALUNO

label_nome = Label(DataFrameLEFT,
                       text='Nome do aluno',
                       font=('arial', 12, 'bold'),
                       bg='#a4dfd1',
                       padx=2,
                       pady=2)
label_nome.pack()
label_nome.place(x=10, y=100)

entry_nome = Entry(DataFrameLEFT,
                       font=('arial', 12, 'bold'))
entry_nome.pack()
entry_nome.place(x=140, y=100)


#LABEL E ENTRY DE ALUNO TURMA

label_turma = Label(DataFrameLEFT,
                       text='Turma',
                       font=('arial', 12, 'bold'),
                       bg='#a4dfd1',
                       padx=2,
                       pady=2)
label_turma.pack()
label_turma.place(x=10, y=150)

entry_turma = Entry(DataFrameLEFT,
                       font=('arial', 12, 'bold'))
entry_turma.pack()
entry_turma.place(x=140, y=150)



#================================DATAFRAME_LEFT_LIVROS================================

#LABEL E ENTRY DE ID LIVRO
label_id_livro = Label(DataFrameLEFT,
                       text='ID do livro',
                       font=('arial', 12, 'bold'),
                       bg='#a4dfd1',
                       padx=2,
                       pady=2)
label_id_livro.pack()
label_id_livro.place(x=350, y=50)

entry_id_livro = Entry(DataFrameLEFT,
                       font=('arial', 12, 'bold'))
entry_id_livro.pack()
entry_id_livro.place(x=450, y=50)


#================================DATAFRAME_RIGHT============================
tree = ttk.Treeview(DataFrameRIGHT, show='headings')

tree['columns'] = ('ID do livro', 'Nome do livro', 'Autor')

tree.column('#0', width=0, stretch=0, anchor=CENTER)
tree.column('ID do livro', anchor=CENTER, width=100)
tree.column('Nome do livro', anchor=CENTER, width=250)
tree.column('Autor', anchor=CENTER, width=150)

tree.heading('#0', text='', anchor=CENTER)
tree.heading('ID do livro', text='ID do livro', anchor=CENTER)
tree.heading('Nome do livro', text='Nome do livro', anchor=CENTER)
tree.heading('Autor', text='Autor', anchor=CENTER)

tree.pack()

#================================FRAME_DETALHE================================
TextoDetalhe = Text(FrameDetalhe,
                    font=('arial', 12, 'bold'),
                    width=141,
                    height=4,
                    padx=2,
                    pady=4)
TextoDetalhe.grid(row=1, column=0)


#================================FRAME_BOTAO==================================

#BOTÃO PARA ADICIONAR REGISTRO DE EMPRÉSTIMO DE LIVRO POR ALUNO NO FRAME DETALHE
botao_adicionar = Button(
                         text='Adicionar',
                         font=('arial', 20, 'bold'),
                         width=10,
                         bd=5,
                         relief = RAISED,
                         command=adicionar
                         )
botao_adicionar.pack()
botao_adicionar.place(x=50, y=600)


#BOTÃO PARA REGISTRAR NOVOS LIVROS NA DATABASE
botao_registrar = Button(
                         text='Registrar',
                         font=('arial', 20, 'bold'),
                         width=10,
                         bd=5,
                         relief = RAISED,
                         command=registrar
                         )
botao_registrar.pack()
botao_registrar.place(x=500, y=600)


#BOTÃO PARA MOSTRAR DADOS NO FRAME DETALHE
mostrar_detalhes = Button(
                         text='Mostrar Dados',
                         font=('arial', 20, 'bold'),
                         width=20,
                         bd=5,
                         relief = RAISED,
                         command=registrar
                         )
botao_registrar.pack()
botao_registrar.place(x=500, y=600)

#BOTÃO PARA DELETAR LINHAS
botao_deletar = Button(
                       text='Deletar',
                       font=('arial', 20, 'bold'),
                       width=10,
                       bd=5,
                       relief = RAISED
                         )
botao_deletar.pack()
botao_deletar.place(x=950, y=600)


def save():
    dict_save = {'id_aluno': [], 'aluno_nome': [], 'turma': [], 'nome_livro': []}

    for iid in tree_view.get_children():
        for value, key in zip(tree_view.item(iid)['values'], dict_save.keys()):
            dict_save[key].append(value)
           
    
    print(dict_save)
    with open('save.json', 'w') as f:
      json.dump(dict_save, f)


def load():
    with open('save.json', 'r') as f:
        data = json.load(f)

    tree_view.delete(*tree_view.get_children())

    for value in zip(*data.values()):
        tree_view.insert('', 'end', values=value)




root.mainloop()



